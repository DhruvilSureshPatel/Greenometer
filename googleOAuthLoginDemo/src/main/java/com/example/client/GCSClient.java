package com.example.client;

import com.google.cloud.vision.v1.*;
import com.google.protobuf.ByteString;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * Interacts with Google Cloud Systems and fetches the response.
 * Set the Env Variable to "GOOGLE_APPLICATION_CREDENTIALS=googleOAuthLoginDemo/auth/GoogleAuth.json"
 */
public class GCSClient {

    //TODO : For Testing Replace with method {@processBase64Image} later.
    public static void main(String[] args) throws IOException {
        processBase64Image("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");
    }

    public static AnnotateImageResponse processBase64Image(String base64Image) throws IOException {
        byte[] base64Byte = base64Image.getBytes();
        ByteString imgBytesBase64 = ByteString.copyFrom(base64Byte);
        UUID uuid = UUID.randomUUID();
        String path = uuid +".jpeg";
        File file = convertBase64ToJpeg(base64Image, path);
        return processMain(file, path);
    }

    public static File convertBase64ToJpeg(String base64String, String filePath) throws IOException {
        String base64ImageString = base64String.replace("data:image/png;base64,", "");
        byte[] imageBytes = javax.xml.bind.DatatypeConverter.parseBase64Binary(base64ImageString);
        // Convert Base64 to PNG or JPG Image
        FileOutputStream fos = new FileOutputStream(filePath);
        try {
            fos.write(imageBytes);
        }
        finally {
            fos.close();
        }
        return new File(filePath);
    }

    public static AnnotateImageResponse processMain(File file, String filePath) throws IOException {
        byte[] imageData = readContentIntoByteArray(file);
        List<AnnotateImageRequest> requests = new ArrayList<>();
        ByteString byteString = ByteString.readFrom(new FileInputStream(filePath));
        Image img = Image.newBuilder().setContent(byteString).build();
        return detectProperties(img);
    }
    public static void processImageFromFilePath(String filePath) throws IOException {
        File file = new File(filePath);
        byte[] imageData = readContentIntoByteArray(file);
        List<AnnotateImageRequest> requests = new ArrayList<>();
        ByteString byteString = ByteString.readFrom(new FileInputStream(filePath));
        Image img = Image.newBuilder().setContent(byteString).build();
        detectProperties(img);
    }


    public static AnnotateImageResponse detectProperties(Image img) throws IOException {
        List<AnnotateImageRequest> requests = new ArrayList<>();
        List<AnnotateImageResponse> responses = new ArrayList<>();

        Feature feat = Feature.newBuilder().setType(Feature.Type.IMAGE_PROPERTIES).build();
        AnnotateImageRequest request =
                AnnotateImageRequest.newBuilder().addFeatures(feat).setImage(img).build();
        requests.add(request);

        try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {
            BatchAnnotateImagesResponse response = client.batchAnnotateImages(requests);
            responses = response.getResponsesList();
        }
        return responses.get(0);
    }

    private static byte[] readContentIntoByteArray(File file) {
        FileInputStream fileInputStream = null;
        byte[] bFile = new byte[(int) file.length()];
        try {
            fileInputStream = new FileInputStream(file);
            fileInputStream.read(bFile);
            fileInputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bFile;
    }

}